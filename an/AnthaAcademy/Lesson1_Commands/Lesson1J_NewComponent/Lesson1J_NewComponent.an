// Example protocol demonstrating setting up a new Liquid Handling Solution (LHComponent).
protocol Lesson1J_NewComponent // this is the name of the protocol Lessonthat will be called in a workflow or other antha element

// the mixer package must be imported to use the Sample function
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters {
	SolutionName          string
	LiquidPolicy          PolicyName
	SolutionConcentration Concentration
	SolutionVolume        Volume
	SubComponents         map[string]Concentration
	DNASequences          []DNASequence
}

// Data which is returned from this protocol, and data types
Data {
}

// Physical Inputs to this protocol with types
Inputs {
}

// Physical outputs from this protocol with types
Outputs {
	// An output LHComponent variable is created with prompt
	OutPutSolution *LHComponent
}

Requirements {

}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	var err error

	OutPutSolution = NewComponent("water")

	OutPutSolution.CName = SolutionName

	err = OutPutSolution.SetPolicyName(LiquidPolicy)

	if err != nil {
		Errorf(err.Error())
	}

	OutPutSolution.SetConcentration(SolutionConcentration)

	OutPutSolution.SetVolume(SolutionVolume)

	if len(SubComponents) > 0 {
		err = OutPutSolution.AddSubComponents(wtype.ComponentList{Components: SubComponents})
		if err != nil {
			Errorf(err.Error())
		}
	}

	for _, dnaSequence := range DNASequences {
		err = OutPutSolution.AddDNASequence(dnaSequence)
		if err != nil {
			Errorf(err.Error())
		}
	}
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed
//correctly. Optionally, destructive tests can be performed to validate
//results on a dipstick basis
Validation {

}
