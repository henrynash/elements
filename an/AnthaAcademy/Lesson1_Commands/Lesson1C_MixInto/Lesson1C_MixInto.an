// Example protocol demonstrating the use of the MixInto function.
// This allows a specific target plate to be specified, and optionally a well location.
//
// Concepts covered:
// Concatenating strings
// Accessing properties of a Type (fields)
// functions called directly on a type (methods)
// godocs
protocol Lesson1C_MixInto

import ()

// Input parameters for this protocol (data)
Parameters {
	// If desired a well location can be declared, e.g. "A1".
	// If left blank, the Antha scheduler will decide.
	Well string
}

// Data which is returned from this protocol, and data types
Data {
	Status string
}

// Physical Inputs to this protocol with types
Inputs {
	// This protocol expects a sample to be passed in from a previous element
	// wire in the output Sample from Lesson1A_Sample into here.
	Sample *LHComponent
	Plate  *LHPlate
}

// Physical outputs from this protocol with types
Outputs {
	TransferredSolution *LHComponent
}

Requirements {

}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	// the MixInto command is used instead of Mix to specify the plate
	// MixInto allows you to specify the exact plate to MixInto (i.e. rather than just a plate type. e.g. barcode 123214234)
	// the three input fields to the MixInto command represent
	// 1. the plate
	// 2. well location as a  string e.g. "A1" (in this case we can also leave it blank "" which will leave the well location up to the scheduler to decide),
	// 3. the sample or array of samples to be mixed
	TransferredSolution = MixInto(Plate, Well, Sample)

	// This time we'll make the Status output more specific to the parameters we've actually used when we come to run the protocol.
	// Strings can be concatenated using the + symbol.
	Status = Sample.Name() + " mixed onto " + Plate.Type
	// We learnt in Lesson1A_Sample that a full stop can indicate comething being accessed from an imported package.
	// This line shows the other two uses of a full stop in code.
	// The first, Sample.Name() shows a special type of function which is called directly on the variable itself.
	// This type of function is called a method. This Name() method can be performed on any Antha *LHComponent.
	// It returns a string description of the value of the measurement followed by the unit.
	//
	// Plate.Type is not running a method on the Plate variable but is calling a property, or field, of that variable.
	// We can tell that Type is a field rather than a method since methods, like functions, are followed by parentheses.

	// In this case we can use the godocs to look at the structure of the LHPlate type that there is a property called Type which is a string.
	// https://godoc.org/github.com/antha-lang/antha/antha/anthalib/wtype#LHPlate
	// The godocs is a useful reference to see what various types, methods and functions do.

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed
//correctly. Optionally, destructive tests can be performed to validate
//results on a dipstick basis
Validation {

}
