// Example protocol demonstrating the use of the MixNamed function.
// This allows a specific type of target plate to be specified, and optionally a well location.
// Concepts covered:
//
// if statements
protocol Lesson1D_MixNamed

import ()

// Input parameters for this protocol (data)
Parameters {
	// If desired a well location can be declared, e.g. "A1".
	// If left blank, the Antha scheduler will decide.
	Well      string
	PlateName string
}

// Data which is returned from this protocol, and data types
Data {
}

// Physical Inputs to this protocol with types
Inputs {
	// This protocol expects a sample to be passed in from a previous element.
	// Wire in the output SampledLiquid from Lesson1A_Sample into here.
	SampledLiquid *Liquid
	Plate         *Plate
}

// Physical outputs from this protocol with types
Outputs {
	TransferredSolution *Liquid
}

Requirements {

}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	// we can write an if statement here to change the name of the plate if the
	// PlateName is left blank.
	// to evaluate if two variables are equal a double equals sign is used (==)
	if PlateName == "" {
		// a single equals sign (=) is used to set the variable PlateName
		PlateName = "Lesson1Plate"
	}

	// the MixNamed command is used instead of Mix to specify the plate type (e.g. "greiner384" or "pcrplate_skirted")
	// the plate types can be found in antha-lang/antha/microArch/factory/make_plate_library.go
	// the four input fields to the MixNamed command represent
	// 1. the platetype as a string: commonly the input to the antha element will actually be an Plate rather than a string
	// so the Type field can be accessed from an Plate by using a full stop, e.g. Plate.Type
	// 2. well location as a  string e.g. "A1" (in this case leaving it blank "" will leave the well location up to the scheduler),
	// 3. the plate name.
	// 4. the sample or array of samples to be mixed; in the case of an array you'd normally feed this in as samples...
	TransferredSolution = MixNamed(Plate.Type, Well, PlateName, SampledLiquid)

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed
//correctly. Optionally, destructive tests can be performed to validate
//results on a dipstick basis
Validation {

}
