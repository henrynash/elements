// protocol Lessonto Demonstrate how to perform sequential mixing using the example of
// making a serial dilution series from a solution and diluent
protocol Lesson3_SerialDilution

import (
	"fmt"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters {
	TotalVolumeperDilution Volume
	DilutionFactor         int // e.g. 10 would take 1 part solution to 9 parts diluent for each dilution
	NumberOfDilutions      int
}

// Data which is returned from this protocol, and data types
Data{}

// Physical Inputs to this protocol with types
Inputs {
	Solution *Liquid
	Diluent  *Liquid
	OutPlate *Plate
}

// Physical outputs from this protocol with types
Outputs {
	Dilutions []*Liquid
}

Requirements {

}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	var dilutions []*Liquid

	var aliquot *Liquid

	// calculate solution volume

	solutionVolume := wunit.DivideVolume(TotalVolumeperDilution, float64(DilutionFactor))

	// use same approach to work out diluent volume to add
	diluentVolume := wunit.SubtractVolumes(TotalVolumeperDilution, solutionVolume)

	// sample diluent
	diluentSample := mixer.Sample(Diluent, diluentVolume)

	// Ensure liquid type set to Pre and Post Mix
	Solution.Type = wtype.LTNeedToMix
	// check if the enzyme is specified and if not mix the

	// sample solution
	solutionSample := mixer.Sample(Solution, solutionVolume)

	// mix both samples to OutPlate
	aliquot = MixNamed(OutPlate.Type, "", fmt.Sprint("DilutionPlate", 1), diluentSample, solutionSample)

	// add to dilutions array
	dilutions = append(dilutions, aliquot)

	// loop through NumberOfDilutions until all serial dilutions are made
	for k := 1; k < NumberOfDilutions; k++ {

		// take next sample of diluent
		nextdiluentSample := mixer.Sample(Diluent, diluentVolume)

		// Ensure liquid type set to Pre and Post Mix
		aliquot.Type = wtype.LTNeedToMix

		// sample from previous dilution sample
		nextSample := mixer.Sample(aliquot, solutionVolume)

		// Mix sample into nextdiluent sample
		nextaliquot := Mix(nextdiluentSample, nextSample)

		// add to dilutions array
		dilutions = append(dilutions, nextaliquot)
		// reset aliquot
		aliquot = nextaliquot
	}

	// export as Output
	Dilutions = dilutions

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {

}
