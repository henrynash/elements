// this protocol Lessonwill set up a specified number of reactions one reaction at a time, i.e. in the following format:
// add all components into reaction 1 location,
// add all components into reaction 2 location,
// ...,
// add all components into reaction n location
protocol Lesson3_ReactionSetUp_OneByOne

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters {
	TotalVolume       Volume
	EnzymeVolume      Volume
	SubstrateVolume   Volume
	NumberofReactions int
}

// Data which is returned from this protocol, and data types
Data {
	Status string
}

// Physical Inputs to this protocol with types
Inputs {
	Buffer    *Liquid
	Substrate *Liquid
	Enzyme    *Liquid
	OutPlate  *Plate
}

// Physical outputs from this protocol with types
Outputs {
	Reactions []*Liquid
}

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	var reactions []*Liquid

	for i := 0; i < NumberofReactions; i++ {
		// creating this eachreaction slice and appending with each sample is the key to ensuring a reaction is made one at a time
		// note that for each reaction this is reinitialised back to an empty slice
		var eachreaction []*Liquid

		bufferSample := mixer.SampleForTotalVolume(Buffer, TotalVolume)

		subSample := mixer.Sample(Substrate, SubstrateVolume)

		enzSample := mixer.Sample(Enzyme, EnzymeVolume)
		eachreaction = append(eachreaction, bufferSample, subSample, enzSample)

		// the Mix command (in this case MixInto) is used once for all the samples
		// this ensures all components are mixed for reaction x before moving on to reaction x + 1
		reaction := MixInto(OutPlate, "", eachreaction...)
		reactions = append(reactions, reaction)

	}
	Reactions = reactions

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
